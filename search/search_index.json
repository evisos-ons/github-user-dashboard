{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This dummy project outlines the requirements for a Python Flask based web application to interact with the GitHub API. The app should serve as a simple GitHub profile and repository management tool for the authenticated user.</p> <p>More information with an overview and clear objectives here.</p>"},{"location":"#skills-used","title":"Skills Used","text":"<ul> <li>Python</li> <li>Flask</li> <li>ONS Design System</li> <li>GitHub REST API</li> <li>Linters and Formaters ONS Python Template</li> <li>pytest</li> <li>Poetry</li> <li>MkDocs</li> </ul>"},{"location":"#tech-stack","title":"Tech Stack","text":"<ul> <li>Python</li> <li>Flask</li> </ul>"},{"location":"#objectives","title":"Objectives","text":""},{"location":"#project-setup","title":"Project Setup","text":"<ul> <li>Make use of poetry to manage both dev and production dependencies.</li> <li>Make use of a Makefile to make commonly executed commands easier to run.</li> <li>Implement and use the linters and formatters used by the ONS Python Template (Black, Ruff, Pylint, Mypy).</li> <li>Make use of a /docs folder and MkDocs to add documentation to the project.</li> <li>Insert all GitHub Usage Policy requirements (i.e PIRR.md, CODEOWNERS, README, .gitignore, etc.). More information available within Software Engineering Policies.</li> </ul>"},{"location":"#core-functionality","title":"Core Functionality","text":"<ul> <li>Authenticate with the GitHub API using a fine grained personal access token. This should be passed through the environment<ul> <li>Within a terminal use: <code>export PAT=&lt;access_token&gt;</code></li> <li>In python use: <code>token = os.getenv(\"PAT\")</code></li> </ul> </li> <li>Display a range of information about the authenticated user (i.e username, avatar, follower, etc.)</li> <li>Ability to update the authenticated user's profile information (i.e update profile bio)</li> <li>Display a list of repositories for the authenticated user</li> <li>Ability to archive repositories *This functionality is just a suggestion on what you can do with the REST API. Feel free to include more functionality or even try the GraphQL API.</li> </ul>"},{"location":"#user-interface","title":"User Interface","text":"<ul> <li>All UI within the tool should use the ONS Design System.</li> </ul>"},{"location":"#testing","title":"Testing","text":"<ul> <li>The code used within the project should have a coverage greater than 70%. </li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>The project should be documented using MkDocs and Material for MkDocs.</li> <li>The MkDocs site should be built and deployed in GitHub pages.</li> <li>Feel free to use any of the GitHub Tooling repos as an example.</li> </ul>"},{"location":"guide/","title":"Guide","text":"<p>See more information here.</p>"},{"location":"guide/#setup","title":"Setup","text":"<p>For setting up this project, run the below command. pyenv is a Python version management tool that allows switching between multiple Python versions. jq is a JSON preprocessor that is used to fetch the design system's templates using <code>scripts/load_release.sh</code>.</p> <pre><code>brew install pyenv jq\n</code></pre> <p>Install Python and initialise the virtual environment as shown below. Note: The Python version is 3.11.</p> <pre><code>pyenv install\npython3 -m venv env &amp;&amp; source env/bin/activate\n</code></pre> <p>Install Poetry, a dependency management and packaging tool, as shown below.</p> <pre><code>pip install poetry\n</code></pre> <p>All the libraries declared are available in <code>pyproject.toml</code>.</p> <p>To install these dependencies, run <code>make install</code>. </p> <p>To install these dependencies plus linting and formatting tools, run <code>make install-dev</code>.</p>"},{"location":"guide/#adding-your-token","title":"Adding your Token","text":"<p>Login to GitHub.</p> <p>Go to github.com/settings.</p> <p>Generate new token and enable these repository permissions.</p> <p>Note: The token must have these scopes and access for the app to work.</p> Scope Access Administration Read and write <p>Generate new token and enable these account permissions.</p> <p>Note: The token must have these scopes and access for the app to work.</p> Scope Access Followers Read-only Profile Read and write Starring Read and write <p>Once you have your token it should look something like this: <code>github_pat_X_LONG_STRING</code></p> <p>You can now add this to your environment by using the command:</p> <pre><code>make add token=&lt;your_token&gt;\n</code></pre> <p>If that doesn't work, try this:</p> <pre><code>export GITHUB_TOKEN=&lt;your_token&gt;\n</code></pre> <p>Now you can run your application.</p>"},{"location":"guide/#running-the-application","title":"Running the Application","text":"<p>To run the flask application without the debugger active use:</p> <pre><code>make run\n</code></pre> <p>To run the flask application with the debugger active use:</p> <pre><code>make run-dev\n</code></pre>"},{"location":"guide/#linting-and-formatting","title":"Linting and Formatting","text":"<p>If you have installed the developer dependencies, you are able to lint and format  using black, ruff and mypy.</p> <pre><code>make lint\n</code></pre> <p>To clean the temporary files created after running the linter, use <code>make clean</code>.</p>"}]}